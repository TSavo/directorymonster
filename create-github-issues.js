#!/usr/bin/env node

/**
 * GitHub Issues Creation Script
 * 
 * This script creates GitHub issues from the JSON files generated by the migration script
 * using the GitHub CLI (gh) which is already installed.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Directory containing the JSON files
const ISSUES_DIR = path.join(__dirname, 'github-issues');

// Check if GitHub CLI is available
try {
  const ghVersion = execSync('gh --version').toString();
  console.log(`GitHub CLI detected: ${ghVersion.split('\n')[0]}`);
} catch (error) {
  console.error('Failed to run GitHub CLI. Please ensure it is correctly installed.');
  process.exit(1);
}

// Helper function to create an issue using GitHub CLI
function createIssue(issueData) {
  const { title, body, labels } = issueData;
  
  // Create labels string
  const labelsArg = labels.map(label => `--label "${label}"`).join(' ');
  
  // Create a temporary file for the issue body
  const bodyFile = path.join(__dirname, 'temp-issue-body.md');
  fs.writeFileSync(bodyFile, body);
  
  try {
    console.log(`Creating issue: ${title}`);
    
    // Use GitHub CLI to create the issue
    const command = `gh issue create --title "${title}" --body-file "${bodyFile}" ${labelsArg}`;
    const result = execSync(command, { encoding: 'utf8' });
    
    console.log(`  Issue created: ${result.trim()}`);
    return result.trim();
  } catch (error) {
    console.error(`Failed to create issue "${title}":`, error.message);
    return null;
  } finally {
    // Clean up the temporary file
    if (fs.existsSync(bodyFile)) {
      fs.unlinkSync(bodyFile);
    }
  }
}

// Process task JSON files
async function processTaskFiles() {
  console.log('\nCreating issues from task JSON files...');
  
  // Get a list of all task JSON files
  const files = fs.readdirSync(ISSUES_DIR)
    .filter(file => file.startsWith('task-') && file.endsWith('.json'))
    .map(file => path.join(ISSUES_DIR, file));
  
  let successCount = 0;
  
  for (const file of files) {
    const issueData = JSON.parse(fs.readFileSync(file, 'utf8'));
    const result = createIssue(issueData);
    
    if (result) {
      successCount++;
    }
    
    // Add a short delay to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`Created ${successCount}/${files.length} task issues.`);
}

// Process checkpoint issue JSON files
async function processCheckpointFiles() {
  console.log('\nCreating issues from checkpoint JSON files...');
  
  // Get a list of all checkpoint issue JSON files
  const files = fs.readdirSync(ISSUES_DIR)
    .filter(file => file.startsWith('checkpoint-issue-') && file.endsWith('.json'))
    .map(file => path.join(ISSUES_DIR, file));
  
  let successCount = 0;
  
  for (const file of files) {
    const issueData = JSON.parse(fs.readFileSync(file, 'utf8'));
    const result = createIssue(issueData);
    
    if (result) {
      successCount++;
    }
    
    // Add a short delay to avoid rate limiting
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log(`Created ${successCount}/${files.length} checkpoint issues.`);
}

// Run the process
(async function main() {
  console.log('Starting GitHub Issues creation...\n');
  
  try {
    await processTaskFiles();
    await processCheckpointFiles();
    
    console.log('\nIssue creation process completed!');
    console.log('Visit https://github.com/TSavo/directorymonster/issues to see your issues.');
  } catch (error) {
    console.error('Error during issue creation:', error);
  }
})();