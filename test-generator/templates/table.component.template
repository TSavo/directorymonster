import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

/**
 * {componentName} - {componentDescription}
 * 
 * A table component for displaying and managing {itemName} data.
 * 
 * Features:
 * - Sorting and filtering
 * - Pagination
 * - Loading and error states
 * - Row selection
 * - CRUD actions
 * - Responsive design
 */
interface {itemName}Type {
  id: string;
  {if props}{props.map(prop => `${prop.name}: ${prop.type || 'string'};`).join('\n  ')}{/if}
}

interface {componentName}Props {
  /**
   * Initial data for the table
   */
  data?: {itemName}Type[];
  /**
   * Flag to indicate if data is loading
   */
  loading?: boolean;
  /**
   * Error message to display
   */
  error?: string;
  /**
   * Callback to retry loading data on error
   */
  onRetry?: () => void;
  /**
   * Callback when a row is selected
   */
  onSelectRow?: (id: string, selected: boolean) => void;
  /**
   * Callback when a row is deleted
   */
  onDeleteRow?: (id: string) => void;
  /**
   * Default number of items per page
   */
  itemsPerPage?: number;
  /**
   * Site slug for URL construction
   */
  siteSlug?: string;
}

export const {componentName}: React.FC<{componentName}Props> = ({
  data = [],
  loading = false,
  error = '',
  onRetry,
  onSelectRow,
  onDeleteRow,
  itemsPerPage = 10,
  siteSlug
}) => {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState(1);
  const [sortField, setSortField] = useState<string>('name');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [selectedRows, setSelectedRows] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [confirmDelete, setConfirmDelete] = useState<string | null>(null);

  // Calculate pagination
  const totalItems = data.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, totalItems);

  // Handle sorting
  const handleSort = (field: string) => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  // Sort and filter data
  const processedData = [...data]
    .filter(item => {
      if (!searchTerm) return true;
      // Search in relevant fields
      return Object.values(item).some(value => 
        value && typeof value === 'string' && 
        value.toLowerCase().includes(searchTerm.toLowerCase())
      );
    })
    .sort((a, b) => {
      const aValue = a[sortField as keyof {itemName}Type];
      const bValue = b[sortField as keyof {itemName}Type];
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortDirection === 'asc' 
          ? aValue.localeCompare(bValue) 
          : bValue.localeCompare(aValue);
      }
      
      // Handle numeric values
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return sortDirection === 'asc' 
          ? aValue - bValue 
          : bValue - aValue;
      }
      
      return 0;
    });

  // Get current page data
  const currentPageData = processedData.slice(startIndex, endIndex);

  // Handle row selection
  const handleRowSelect = (id: string, selected: boolean) => {
    if (selected) {
      setSelectedRows(prev => [...prev, id]);
    } else {
      setSelectedRows(prev => prev.filter(rowId => rowId !== id));
    }
    
    if (onSelectRow) {
      onSelectRow(id, selected);
    }
  };

  // Handle delete confirmation
  const handleDeleteConfirm = () => {
    if (confirmDelete && onDeleteRow) {
      onDeleteRow(confirmDelete);
      setSelectedRows(prev => prev.filter(id => id !== confirmDelete));
      setConfirmDelete(null);
    }
  };

  // Handle page navigation
  const goToPage = (page: number) => {
    if (page < 1 || page > totalPages) return;
    setCurrentPage(page);
  };

  // Handle search
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1); // Reset to first page on search
  };

  // Reset all filters
  const resetFilters = () => {
    setSearchTerm('');
    setSortField('name');
    setSortDirection('asc');
    setCurrentPage(1);
  };

  // Construct URLs
  const getViewUrl = (id: string) => {
    return siteSlug 
      ? `/${siteSlug}/admin/{apiEndpoint}/${id}`
      : `/admin/{apiEndpoint}/${id}`;
  };

  const getEditUrl = (id: string) => {
    return siteSlug 
      ? `/${siteSlug}/admin/{apiEndpoint}/${id}/edit`
      : `/admin/{apiEndpoint}/${id}/edit`;
  };

  const getCreateUrl = () => {
    return siteSlug 
      ? `/${siteSlug}/admin/{apiEndpoint}/new`
      : `/admin/{apiEndpoint}/new`;
  };

  // Render loading state
  if (loading) {
    return (
      <div 
        className="w-full p-8 flex justify-center" 
        role="status"
        data-testid="{componentNameCamelCase}-loading"
      >
        <div className="animate-pulse space-y-4 w-full">
          <div className="h-8 bg-gray-200 rounded w-3/4"></div>
          <div className="h-64 bg-gray-200 rounded"></div>
          <div className="h-8 bg-gray-200 rounded w-1/2"></div>
        </div>
        <span className="sr-only">Loading...</span>
      </div>
    );
  }

  // Render error state
  if (error) {
    return (
      <div 
        className="w-full p-8 text-center" 
        data-testid="{componentNameCamelCase}-error"
      >
        <div className="mb-4 text-red-500">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h3 className="text-lg font-medium mb-2">Error Loading Data</h3>
        <p className="mb-4">{error}</p>
        {onRetry && (
          <button
            onClick={onRetry}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2"
            data-testid="{componentNameCamelCase}-retry-button"
          >
            Retry
          </button>
        )}
      </div>
    );
  }

  // Render empty state
  if (data.length === 0) {
    return (
      <div 
        className="w-full p-8 text-center border rounded-lg bg-white"
        data-testid="{componentNameCamelCase}-empty-state"
      >
        <div className="mb-4 text-gray-400">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
          </svg>
        </div>
        <h3 className="text-lg font-medium mb-2">No {itemName}s Found</h3>
        <p className="mb-4">Get started by creating your first {itemName}.</p>
        <Link
          href={getCreateUrl()}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2"
          data-testid="{componentNameCamelCase}-create-button"
        >
          Create {itemName}
        </Link>
      </div>
    );
  }

  // Render table
  return (
    <div className="w-full" data-testid="{componentNameCamelCase}">
      {/* Table header with search and filters */}
      <div className="mb-4 flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div className="w-full md:w-auto">
          <div className="relative">
            <input
              type="text"
              value={searchTerm}
              onChange={handleSearch}
              placeholder={`Search ${itemName}s...`}
              className="w-full md:w-64 pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:border-blue-500"
              data-testid="{componentNameCamelCase}-search"
            />
            <div className="absolute left-3 top-2.5 text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            {searchTerm && (
              <button
                onClick={() => setSearchTerm('')}
                className="absolute right-3 top-2.5 text-gray-400 hover:text-gray-600"
                aria-label="Clear search"
                data-testid="{componentNameCamelCase}-clear-search"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>
        </div>

        <div className="flex flex-wrap gap-2">
          {(searchTerm || sortField !== 'name' || sortDirection !== 'asc') && (
            <button
              onClick={resetFilters}
              className="px-3 py-1.5 border rounded-lg text-sm flex items-center hover:bg-gray-50"
              data-testid="{componentNameCamelCase}-reset-filters"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Reset
            </button>
          )}
          
          <Link
            href={getCreateUrl()}
            className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm flex items-center hover:bg-blue-700"
            data-testid="{componentNameCamelCase}-create-link"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Create {itemName}
          </Link>
        </div>
      </div>

      {/* Main table */}
      <div className="overflow-x-auto">
        <table className="min-w-full bg-white border rounded-lg" data-testid="{componentNameCamelCase}-table">
          <thead>
            <tr className="bg-gray-50 border-b">
              {onSelectRow && (
                <th className="px-4 py-3 w-10">
                  <input
                    type="checkbox"
                    checked={selectedRows.length === currentPageData.length && currentPageData.length > 0}
                    onChange={(e) => {
                      const isChecked = e.target.checked;
                      if (isChecked) {
                        const allIds = currentPageData.map(item => item.id);
                        setSelectedRows(allIds);
                        if (onSelectRow) {
                          allIds.forEach(id => onSelectRow(id, true));
                        }
                      } else {
                        const currentIds = currentPageData.map(item => item.id);
                        setSelectedRows(prev => prev.filter(id => !currentIds.includes(id)));
                        if (onSelectRow) {
                          currentIds.forEach(id => onSelectRow(id, false));
                        }
                      }
                    }}
                    aria-label="Select all rows"
                    data-testid="{componentNameCamelCase}-select-all"
                  />
                </th>
              )}
              
              {if props}
              {props.filter(prop => prop.showInTable !== false).map(prop => `
              <th
                className="px-4 py-3 text-left text-sm font-medium text-gray-700 cursor-pointer"
                onClick={() => handleSort('${prop.name}')}
                aria-sort={sortField === '${prop.name}' ? sortDirection : undefined}
                data-testid="{componentNameCamelCase}-header-${prop.name}"
              >
                <div className="flex items-center">
                  <span>${prop.label || prop.name}</span>
                  {sortField === '${prop.name}' && (
                    <span className="ml-1">
                      {sortDirection === 'asc' ? (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                        </svg>
                      ) : (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      )}
                    </span>
                  )}
                </div>
              </th>`).join('\n')}
              {/if}
              
              <th className="px-4 py-3 text-right w-20" data-testid="{componentNameCamelCase}-header-actions">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {currentPageData.map((item, index) => (
              <tr 
                key={item.id} 
                className={`border-b ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}
                data-testid={`{componentNameCamelCase}-row-${item.id}`}
              >
                {onSelectRow && (
                  <td className="px-4 py-3">
                    <input
                      type="checkbox"
                      checked={selectedRows.includes(item.id)}
                      onChange={(e) => handleRowSelect(item.id, e.target.checked)}
                      aria-label={`Select ${itemName} ${item.id}`}
                      data-testid={`{componentNameCamelCase}-select-${item.id}`}
                    />
                  </td>
                )}
                
                {if props}
                {props.filter(prop => prop.showInTable !== false).map(prop => `
                <td 
                  className="px-4 py-3 text-sm ${prop.type === 'number' ? 'text-right' : ''}" 
                  data-testid="{componentNameCamelCase}-cell-${prop.name}"
                >
                  {${prop.formatter ? `${prop.formatter}(item.${prop.name})` : `item.${prop.name}`}}
                </td>`).join('\n')}
                {/if}
                
                <td className="px-4 py-3 text-right">
                  <div className="flex justify-end space-x-1">
                    <Link
                      href={getViewUrl(item.id)}
                      className="p-1 text-blue-600 hover:text-blue-800 rounded-full"
                      aria-label={`View ${itemName} ${item.name || item.id}`}
                      data-testid={`{componentNameCamelCase}-view-${item.id}`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    </Link>
                    <Link
                      href={getEditUrl(item.id)}
                      className="p-1 text-green-600 hover:text-green-800 rounded-full"
                      aria-label={`Edit ${itemName} ${item.name || item.id}`}
                      data-testid={`{componentNameCamelCase}-edit-${item.id}`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </Link>
                    {onDeleteRow && (
                      <button
                        onClick={() => setConfirmDelete(item.id)}
                        className="p-1 text-red-600 hover:text-red-800 rounded-full"
                        aria-label={`Delete ${itemName} ${item.name || item.id}`}
                        data-testid={`{componentNameCamelCase}-delete-${item.id}`}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div 
          className="mt-4 flex flex-col sm:flex-row justify-between items-center gap-4"
          data-testid="{componentNameCamelCase}-pagination"
        >
          <div className="text-sm text-gray-600" data-testid="{componentNameCamelCase}-pagination-info">
            Showing {startIndex + 1}-{endIndex} of {totalItems} {itemName}s
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => goToPage(1)}
              disabled={currentPage === 1}
              className="p-2 rounded border hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="First page"
              data-testid="{componentNameCamelCase}-pagination-first"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
              </svg>
            </button>
            <button
              onClick={() => goToPage(currentPage - 1)}
              disabled={currentPage === 1}
              className="p-2 rounded border hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Previous page"
              data-testid="{componentNameCamelCase}-pagination-prev"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <span className="text-sm px-4">
              Page {currentPage} of {totalPages}
            </span>
            
            <button
              onClick={() => goToPage(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="p-2 rounded border hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Next page"
              data-testid="{componentNameCamelCase}-pagination-next"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
            <button
              onClick={() => goToPage(totalPages)}
              disabled={currentPage === totalPages}
              className="p-2 rounded border hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Last page"
              data-testid="{componentNameCamelCase}-pagination-last"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>
      )}

      {/* Delete confirmation modal */}
      {confirmDelete && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div 
            className="absolute inset-0 bg-black opacity-50"
            onClick={() => setConfirmDelete(null)}
            data-testid="{componentNameCamelCase}-modal-backdrop"
          ></div>
          <div 
            className="bg-white rounded-lg w-full max-w-md p-6 z-10"
            role="dialog"
            aria-modal="true"
            aria-labelledby="delete-modal-title"
            data-testid="{componentNameCamelCase}-confirm-dialog"
          >
            <h3 id="delete-modal-title" className="text-lg font-medium mb-4">Confirm Delete</h3>
            <p className="mb-6">Are you sure you want to delete this {itemName}? This action cannot be undone.</p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setConfirmDelete(null)}
                className="px-4 py-2 border rounded hover:bg-gray-50"
                data-testid="{componentNameCamelCase}-cancel-button"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteConfirm}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                data-testid="{componentNameCamelCase}-confirm-button"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default {componentName};
