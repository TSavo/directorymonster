import React, { useEffect, useRef } from 'react';

/**
 * {componentName} - {componentDescription}
 * 
 * A modal dialog component with keyboard navigation support.
 * 
 * Features:
 * - Focus management
 * - Keyboard navigation (Escape key to close)
 * - Focus trapping
 * - Aria attributes for accessibility
 * - Backdrop click handling
 */
interface {componentName}Props {
  /**
   * Whether the modal is open
   */
  isOpen: boolean;
  /**
   * Title for the modal
   */
  title: string;
  /**
   * Callback when the modal is closed
   */
  onClose: () => void;
  /**
   * Content for the modal
   */
  children: React.ReactNode;
  /**
   * Size of the modal (default: md)
   */
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

export const {componentName}: React.FC<{componentName}Props> = ({
  isOpen,
  title,
  onClose,
  children,
  size = 'md'
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const closeButtonRef = useRef<HTMLButtonElement>(null);
  const contentRef = useRef<HTMLDivElement>(null);

  // Focus management
  useEffect(() => {
    if (isOpen && closeButtonRef.current) {
      // Set focus to close button when modal opens
      closeButtonRef.current.focus();
    }
  }, [isOpen]);

  // Handle keyboard events
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape') {
      onClose();
    } else if (e.key === 'Tab') {
      // Trap focus within modal
      if (!modalRef.current) return;
      
      const focusableElements = modalRef.current.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      
      const firstElement = focusableElements[0] as HTMLElement;
      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
      
      // If shift+tab and on first element, go to last element
      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      } 
      // If tab and on last element, go to first element
      else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    }
  };

  // Calculate width based on size
  const getWidthClass = () => {
    switch (size) {
      case 'sm': return 'max-w-sm';
      case 'md': return 'max-w-md';
      case 'lg': return 'max-w-lg';
      case 'xl': return 'max-w-xl';
      default: return 'max-w-md';
    }
  };

  // If modal is not open, don't render anything
  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 z-50 flex items-center justify-center"
      role="dialog"
      aria-modal="true"
      aria-labelledby="{componentNameCamelCase}-title"
      data-testid="{componentNameCamelCase}"
      onKeyDown={handleKeyDown}
      ref={modalRef}
    >
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black bg-opacity-50 transition-opacity"
        onClick={onClose}
        data-testid="{componentNameCamelCase}-backdrop"
      ></div>
      
      {/* Modal content */}
      <div 
        className={`relative bg-white rounded-lg shadow-xl w-full ${getWidthClass()} p-6 transform transition-all`}
        data-testid="{componentNameCamelCase}-content"
        ref={contentRef}
      >
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <h2 
            id="{componentNameCamelCase}-title" 
            className="text-xl font-semibold"
            data-testid="{componentNameCamelCase}-title"
          >
            {title}
          </h2>
          <button
            type="button"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 p-1 rounded-full"
            aria-label="Close modal"
            data-testid="{componentNameCamelCase}-close"
            ref={closeButtonRef}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {/* Body */}
        <div 
          className="mt-2"
          data-testid="{componentNameCamelCase}-body"
        >
          {children}
        </div>
      </div>
    </div>
  );
};

export default {componentName};
