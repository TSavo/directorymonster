import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

/**
 * {componentName} - {componentDescription}
 * 
 * A form component for creating and editing {itemName} data.
 * 
 * Features:
 * - Form validation with error messages
 * - API integration for submission
 * - Loading states and error handling
 * - Accessibility support with ARIA attributes
 * - Keyboard navigation
 */
interface {componentName}Props {
  /**
   * Initial data for editing an existing item
   */
  initialData?: {
    id?: string;
    {if props}{props.map(prop => `${prop.name}?: ${prop.type || 'string'};`).join('\n    ')}{/if}
  };
  /**
   * Mode for the form (create or edit)
   */
  mode?: 'create' | 'edit';
  /**
   * Callback when form is canceled
   */
  onCancel?: () => void;
  /**
   * Callback when form is submitted successfully
   */
  onSuccess?: (data: any) => void;
}

export const {componentName}: React.FC<{componentName}Props> = ({
  initialData = {},
  mode = 'create',
  onCancel,
  onSuccess
}) => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [success, setSuccess] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // Dynamic fields state (if needed)
  {if hasDynamicFields}
  const [dynamicFields, setDynamicFields] = useState<string[]>(initialData.dynamicFields || []);
  {/if}

  // Form state
  const [formData, setFormData] = useState({
    {if props}{props.map(prop => `${prop.name}: initialData.${prop.name} || ${prop.defaultValue || "''"}`).join(',\n    ')}{/if}
  });

  // Validation state
  const [errors, setErrors] = useState<{
    {if props}{props.map(prop => `${prop.name}?: string`).join(';\n    ')}{/if}
  }>({});

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when field is changed
    if (errors[name as keyof typeof errors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  // Validation function
  const validateForm = (): boolean => {
    const newErrors: typeof errors = {};
    let isValid = true;

    {if props}
    {props.filter(prop => prop.required).map(prop => `
    // Validate ${prop.name}
    if (!formData.${prop.name}.trim()) {
      newErrors.${prop.name} = '${prop.label || prop.name} is required';
      isValid = false;
    } ${prop.maxLength ? `else if (formData.${prop.name}.length > ${prop.maxLength}) {
      newErrors.${prop.name} = '${prop.label || prop.name} cannot exceed ${prop.maxLength} characters';
      isValid = false;
    }` : ''}`).join('\n')}
    {/if}

    setErrors(newErrors);
    return isValid;
  };

  {if hasDynamicFields}
  // Add dynamic field
  const addField = () => {
    setDynamicFields(prev => [...prev, '']);
    
    // Set focus on the new field after render
    setTimeout(() => {
      const newIndex = dynamicFields.length;
      const newInput = document.getElementById(`{componentNameCamelCase}-dynamic-input-${newIndex}`);
      if (newInput) {
        newInput.focus();
      }
    }, 0);
  };

  // Remove dynamic field
  const removeField = (index: number) => {
    setDynamicFields(prev => prev.filter((_, i) => i !== index));
    
    // Set focus on the add button after remove
    setTimeout(() => {
      const addButton = document.getElementById('{componentNameCamelCase}-add-field');
      if (addButton) {
        addButton.focus();
      }
    }, 0);
  };

  // Handle dynamic field change
  const handleDynamicFieldChange = (index: number, value: string) => {
    setDynamicFields(prev => prev.map((field, i) => i === index ? value : field));
  };
  {/if}

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      // Prepare data for submission
      const dataToSubmit = {
        ...formData,
        {if hasDynamicFields}
        dynamicFields: dynamicFields.filter(field => field.trim() !== ''),
        {/if}
      };
      
      // Determine API endpoint and method based on mode
      const method = mode === 'edit' ? 'PUT' : 'POST';
      const endpoint = mode === 'edit' 
        ? `/api/{apiEndpoint}/${initialData.id || formData.id}` 
        : '/api/{apiEndpoint}';
      
      // Submit form data
      const response = await fetch(endpoint, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataToSubmit)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        setSuccess(mode === 'edit' ? 'Updated successfully' : 'Created successfully');
        
        // Call success callback if provided
        if (onSuccess) {
          onSuccess(result);
        }
        
        // Redirect after successful submission
        setTimeout(() => {
          router.push(`/{resourcePath}/${result.id || result.slug}`);
        }, 1500);
      } else {
        throw new Error(result.error || 'An error occurred');
      }
    } catch (err: any) {
      setError(err.message || 'Failed to submit form');
    } finally {
      setIsLoading(false);
    }
  };

  // Render the form
  return (
    <div className="w-full max-w-2xl mx-auto p-6 bg-white rounded shadow">
      <h1 
        id="{componentNameCamelCase}-header" 
        className="text-xl font-bold mb-6"
        data-testid="{componentNameCamelCase}-header"
      >
        {mode === 'edit' ? 'Edit' : 'Create'} {itemName}
      </h1>
      
      {/* Error message */}
      {error && (
        <div 
          className="mb-4 p-3 bg-red-100 text-red-700 rounded" 
          role="alert"
          data-testid="{componentNameCamelCase}-error"
        >
          {error}
        </div>
      )}
      
      {/* Success message */}
      {success && (
        <div 
          className="mb-4 p-3 bg-green-100 text-green-700 rounded" 
          role="alert"
          data-testid="{componentNameCamelCase}-success"
        >
          {success}
        </div>
      )}
      
      <form 
        onSubmit={handleSubmit} 
        role="form" 
        aria-labelledby="{componentNameCamelCase}-header"
        data-testid="{componentNameCamelCase}-form"
      >
        {/* Basic info section */}
        <fieldset 
          className="mb-6" 
          data-testid="{componentNameCamelCase}-basic-info"
        >
          <legend className="text-lg font-semibold mb-3" data-testid="{componentNameCamelCase}-section-heading">
            Basic Information
          </legend>
          
          {if props}
          {props.filter(prop => !prop.isAdvanced).map(prop => `
          <div className="mb-4" data-testid="{componentNameCamelCase}-${prop.name}-container">
            <label 
              htmlFor="{componentNameCamelCase}-${prop.name}"
              className="block text-sm font-medium mb-1"
            >
              ${prop.label || prop.name} ${prop.required ? '*' : ''}
            </label>
            <input
              type="${prop.type === 'number' ? 'number' : 'text'}"
              id="{componentNameCamelCase}-${prop.name}"
              name="${prop.name}"
              value={formData.${prop.name}}
              onChange={handleChange}
              disabled={isLoading ${prop.name === 'slug' && mode === 'edit' ? '|| mode === "edit"' : ''}}
              placeholder="${prop.placeholder || `Enter ${prop.label || prop.name}`}"
              className="w-full p-2 border rounded focus:ring-2 focus:border-blue-500 ${errors.${prop.name} ? 'border-red-500' : 'border-gray-300'}"
              aria-required="${prop.required ? 'true' : 'false'}"
              ${errors[prop.name] ? 'aria-invalid="true"' : ''}
              ${errors[prop.name] ? `aria-describedby="{componentNameCamelCase}-${prop.name}-error"` : ''}
              data-testid="{componentNameCamelCase}-${prop.name}"
            />
            ${prop.helpText ? `<p className="mt-1 text-sm text-gray-500" data-testid="{componentNameCamelCase}-${prop.name}-help">${prop.helpText}</p>` : ''}
            ${`{errors.${prop.name} && (
              <p 
                className="mt-1 text-sm text-red-500" 
                role="alert" 
                aria-live="assertive"
                id="{componentNameCamelCase}-${prop.name}-error"
                data-testid="{componentNameCamelCase}-${prop.name}-error"
              >
                {errors.${prop.name}}
              </p>
            )}`}
          </div>`).join('\n')}
          {/if}
          
          {if hasDynamicFields}
          {/* Dynamic fields section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3">Dynamic Fields</h3>
            
            {dynamicFields.map((field, index) => (
              <div key={index} className="flex items-center mb-2">
                <input
                  type="text"
                  id={`{componentNameCamelCase}-dynamic-input-${index}`}
                  value={field}
                  onChange={(e) => handleDynamicFieldChange(index, e.target.value)}
                  className="flex-grow p-2 border rounded mr-2"
                  placeholder="Enter value"
                  disabled={isLoading}
                  aria-label={`Dynamic Field ${index + 1}`}
                  data-testid={`{componentNameCamelCase}-dynamic-input-${index}`}
                />
                <button
                  type="button"
                  onClick={() => removeField(index)}
                  className="p-2 text-red-500 hover:text-red-700"
                  aria-label={`Remove field ${index + 1}`}
                  data-testid={`{componentNameCamelCase}-remove-field-${index}`}
                  disabled={isLoading}
                >
                  <span className="sr-only">Remove</span>
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M18 6L6 18M6 6l12 12" />
                  </svg>
                </button>
              </div>
            ))}
            
            <button
              type="button"
              onClick={addField}
              className="mt-2 p-2 text-sm bg-gray-100 hover:bg-gray-200 rounded flex items-center"
              data-testid="{componentNameCamelCase}-add-field"
              disabled={isLoading}
              id="{componentNameCamelCase}-add-field"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1">
                <path d="M12 5v14M5 12h14" />
              </svg>
              Add Field
            </button>
          </div>
          {/if}
        </fieldset>
        
        {/* Form actions */}
        <div className="flex justify-end space-x-3 mt-8">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded focus:outline-none focus:ring-2"
            data-testid="{componentNameCamelCase}-cancel"
            disabled={isLoading}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded focus:outline-none focus:ring-2 disabled:opacity-50"
            data-testid="{componentNameCamelCase}-submit"
            disabled={isLoading || Object.keys(errors).length > 0}
          >
            {isLoading ? (
              <span data-testid="{componentNameCamelCase}-submit-loading">
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Loading...
              </span>
            ) : (
              mode === 'edit' ? `Update ${itemName}` : `Create ${itemName}`
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default {componentName};
