import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

/**
 * {{componentName}} - {{componentDescription}}
 * 
 * A form component for creating and editing {{itemName}} data.
 * 
 * Features:
 * - Form validation with error messages
 * - API integration for submission
 * - Loading states and error handling
 * - Accessibility support with ARIA attributes
 * - Keyboard navigation
 */
export interface {{componentName}}Props {
  /**
   * Initial data for editing an existing item
   */
  initialData?: {
    id?: string;
    {{#each props}}
    {{this.name}}?: {{this.type}};
    {{/each}}
  };
  /**
   * Mode for the form (create or edit)
   */
  mode?: 'create' | 'edit';
  /**
   * Callback when form is canceled
   */
  onCancel?: () => void;
  /**
   * Callback when form is submitted successfully
   */
  onSuccess?: (data: any) => void;
  /**
   * API endpoint for form submission
   */
  apiEndpoint?: string;
}

export const {{componentName}}: React.FC<{{componentName}}Props> = ({
  initialData = {},
  mode = 'create',
  onCancel,
  onSuccess,
  apiEndpoint = '/api/{{kebabCase apiEndpoint}}'
}) => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [success, setSuccess] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  {{#if hasDynamicFields}}
  // Dynamic fields state
  const [dynamicFields, setDynamicFields] = useState<string[]>(initialData.dynamicFields || []);
  {{/if}}

  // Form state
  {{#each props}}
  const [{{this.name}}, set{{pascalCase this.name}}] = useState<{{this.type}}>(initialData.{{this.name}} || {{#if this.defaultValue}}{{this.defaultValue}}{{else}}{{#eq this.type "string[]"}}[]{{else}}''{{/eq}}{{/if}});
  {{/each}}
  
  // Validation state
  const [errors, setErrors] = useState<{
    {{#each props}}
    {{this.name}}?: string;
    {{/each}}
    format?: string;
  }>({});

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    
    {{#each props}}
    if (name === '{{this.name}}') set{{pascalCase this.name}}(value);
    {{/each}}
    
    // Clear error when field is changed
    if (errors[name as keyof typeof errors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  {{#if hasDynamicFields}}
  // Add dynamic field
  const addField = () => {
    setDynamicFields(prev => [...prev, '']);
    
    // Set focus on the new field after render
    setTimeout(() => {
      const newIndex = dynamicFields.length;
      const newInput = document.getElementById(`{{camelCase componentName}}-dynamic-input-${newIndex}`);
      if (newInput) {
        newInput.focus();
      }
    }, 0);
  };

  // Remove dynamic field
  const removeField = (index: number) => {
    setDynamicFields(prev => prev.filter((_, i) => i !== index));
    
    // Set focus on the add button after remove
    setTimeout(() => {
      const addButton = document.getElementById('{{camelCase componentName}}-add-field');
      if (addButton) {
        addButton.focus();
      }
    }, 0);
  };

  // Handle dynamic field change
  const handleDynamicFieldChange = (index: number, value: string) => {
    setDynamicFields(prev => prev.map((field, i) => i === index ? value : field));
  };
  {{/if}}

  // Validation function
  const validateForm = (): boolean => {
    const newErrors: typeof errors = {};
    let isValid = true;

    {{#each props}}
    {{#if this.required}}
    // Validate {{this.name}}
    if (!{{this.name}} || !{{this.name}}.toString().trim()) {
      newErrors.{{this.name}} = '{{#if this.label}}{{this.label}}{{else}}{{pascalCase this.name}}{{/if}} is required';
      isValid = false;
    }{{#if this.maxLength}} else if ({{this.name}}.length > {{this.maxLength}}) {
      newErrors.{{this.name}} = '{{#if this.label}}{{this.label}}{{else}}{{pascalCase this.name}}{{/if}} cannot exceed {{this.maxLength}} characters';
      isValid = false;
    }{{/if}}{{#if this.pattern}} else if (!{{this.pattern}}.test({{this.name}})) {
      newErrors.{{this.name}} = '{{#if this.validationMessage}}{{this.validationMessage}}{{else}}Invalid {{#if this.label}}{{this.label}}{{else}}{{this.name}}{{/if}} format{{/if}}';
      isValid = false;
    }{{/if}}
    {{/if}}
    {{/each}}

    setErrors(newErrors);
    return isValid;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      // Prepare data for submission
      const dataToSubmit = {
        {{#each props}}
        {{this.name}}: {{this.name}},
        {{/each}}
        {{#if hasDynamicFields}}
        dynamicFields: dynamicFields.filter(field => field.trim() !== ''),
        {{/if}}
      };
      
      // Determine API endpoint and method based on mode
      const method = mode === 'edit' ? 'PUT' : 'POST';
      const endpoint = mode === 'edit' 
        ? `${apiEndpoint}/${initialData.id}` 
        : apiEndpoint;
      
      // Submit form data
      const response = await fetch(endpoint, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataToSubmit)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        setSuccess(mode === 'edit' ? '{{itemName}} updated successfully' : '{{itemName}} created successfully');
        
        // Call success callback if provided
        if (onSuccess) {
          onSuccess(result);
        }
        
        // Redirect after successful submission
        setTimeout(() => {
          router.push(`/{{resourcePath}}/${result.id || result.slug}`);
        }, 1500);
      } else {
        throw new Error(result.error || 'An error occurred');
      }
    } catch (err: any) {
      setError(err.message || 'Failed to submit form');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-2xl mx-auto p-6 bg-white rounded shadow">
      <h1 
        id="{{camelCase componentName}}-header" 
        className="text-xl font-bold mb-6"
        data-testid="{{camelCase componentName}}-header"
      >
        {mode === 'edit' ? 'Edit' : 'Create'} {{itemName}}
      </h1>
      
      {/* Error message */}
      {error && (
        <div 
          className="mb-4 p-3 bg-red-100 text-red-700 rounded" 
          role="alert"
          data-testid="{{camelCase componentName}}-error"
        >
          {error}
        </div>
      )}
      
      {/* Success message */}
      {success && (
        <div 
          className="mb-4 p-3 bg-green-100 text-green-700 rounded" 
          role="alert"
          data-testid="{{camelCase componentName}}-success"
        >
          {success}
        </div>
      )}
      
      <form 
        onSubmit={handleSubmit} 
        role="form" 
        aria-labelledby="{{camelCase componentName}}-header"
        data-testid="{{camelCase componentName}}-form"
      >
        <fieldset 
          className="mb-6" 
          data-testid="{{camelCase componentName}}-fieldset"
        >
          <legend className="text-lg font-semibold mb-3" data-testid="{{camelCase componentName}}-section-heading">
            {{itemName}} Information
          </legend>
          
          {{#each props}}
          <div className="mb-4" data-testid="{{../componentNameCamelCase}}-field-container">
            <label 
              htmlFor="{{../camelCase ../componentName}}-{{this.name}}"
              className="block text-sm font-medium mb-1"
              id="{{../camelCase ../componentName}}-{{this.name}}-label"
            >
              {{#if this.label}}{{this.label}}{{else}}{{pascalCase this.name}}{{/if}}{{#if this.required}} *{{/if}}
            </label>
            <input
              type="{{#eq this.type "number"}}number{{else}}text{{/eq}}"
              id="{{../camelCase ../componentName}}-{{this.name}}"
              name="{{this.name}}"
              value={ {{this.name}} }
              onChange={handleChange}
              disabled={isLoading}
              placeholder="{{#if this.placeholder}}{{this.placeholder}}{{else}}Enter {{#if this.label}}{{toLowerCase this.label}}{{else}}{{toLowerCase this.name}}{{/if}}{{/if}}"
              className={`w-full p-2 border rounded focus:ring-2 focus:border-blue-500 ${errors.{{this.name}} ? 'border-red-500' : 'border-gray-300'}`}
              aria-required="{{#if this.required}}true{{else}}false{{/if}}"
              aria-invalid={errors.{{this.name}} ? "true" : "false"}
              aria-describedby={errors.{{this.name}} ? "{{../camelCase ../componentName}}-{{this.name}}-error" : undefined}
              data-testid="{{../camelCase ../componentName}}-{{this.name}}"
            />
            {{#if this.helpText}}
            <p className="mt-1 text-sm text-gray-500" data-testid="{{../camelCase ../componentName}}-{{this.name}}-help" id="{{../camelCase ../componentName}}-{{this.name}}-help">{{this.helpText}}</p>
            {{/if}}
            {{#if (lookup ../errors this.name)}}
              <p 
                className="mt-1 text-sm text-red-500" 
                role="alert" 
                aria-live="assertive"
                id="{{../camelCase ../componentName}}-{{this.name}}-error"
                data-testid="{{../camelCase ../componentName}}-{{this.name}}-error"
              >
                {errors.{{this.name}} || ''}
              </p>
            {{/if}}
          </div>
          {{/each}}

          {{#if hasDynamicFields}}
          <div className="mb-6">
            <h3 className="text-md font-medium mb-2">Additional Fields</h3>
            
            {dynamicFields.map((field, index) => (
              <div key={index} className="flex items-center mb-2">
                <input
                  type="text"
                  id={`{{camelCase componentName}}-dynamic-input-${index}`}
                  value={field}
                  onChange={(e) => handleDynamicFieldChange(index, e.target.value)}
                  className="flex-grow p-2 border rounded mr-2"
                  placeholder="Enter value"
                  disabled={isLoading}
                  aria-label={`Dynamic Field ${index + 1}`}
                  data-testid={`{{camelCase componentName}}-dynamic-input-${index}`}
                />
                <button
                  type="button"
                  onClick={() => removeField(index)}
                  className="p-2 text-red-500 hover:text-red-700"
                  aria-label={`Remove field ${index + 1}`}
                  data-testid={`{{camelCase componentName}}-remove-field-${index}`}
                  disabled={isLoading}
                >
                  <span className="sr-only">Remove</span>
                  ×
                </button>
              </div>
            ))}
            
            <button
              type="button"
              onClick={addField}
              className="mt-2 p-2 text-sm bg-gray-100 hover:bg-gray-200 rounded flex items-center"
              data-testid="{{camelCase componentName}}-add-field"
              disabled={isLoading}
              id="{{camelCase componentName}}-add-field"
            >
              + Add Field
            </button>
          </div>
          {{/if}}

          <p className="text-sm text-gray-500 mt-4" data-testid="{{camelCase componentName}}-format-help">
            * Required fields. Slugs can only contain lowercase letters, numbers, and hyphens.
          </p>
        </fieldset>
        
        <div className="flex justify-end space-x-3 mt-8">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded focus:outline-none focus:ring-2"
            data-testid="{{camelCase componentName}}-cancel"
            disabled={isLoading}
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded focus:outline-none focus:ring-2 disabled:opacity-50"
            data-testid="{{camelCase componentName}}-submit"
            disabled={isLoading || Object.keys(errors).length > 0}
          >
            {isLoading ? (
              <span data-testid="{{camelCase componentName}}-submit-loading">
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Loading...
              </span>
            ) : (
              mode === 'edit' ? `Update {{itemName}}` : `Create {{itemName}}`
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default {{componentName}};
