[
  {
    "title": "Implement POST /api/admin/roles API",
    "body": "## Description\nImplement the POST /api/admin/roles API endpoint according to the specification in `specs/api/admin/POST_admin_roles.md`.\n\n## Requirements\n- Create a new role with specified name, description, and permissions\n- Support both tenant-wide and site-specific roles\n- Validate role data for completeness and correctness\n- Prevent duplicate role names within the same tenant\n- Return the created role with its assigned ID\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All required fields are validated\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Duplicate role names are prevented\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/POST_admin_roles.md`"
  },
  {
    "title": "Implement GET /api/admin/roles/{id} API",
    "body": "## Description\nImplement the GET /api/admin/roles/{id} API endpoint according to the specification in `specs/api/admin/GET_admin_roles_id.md`.\n\n## Requirements\n- Return detailed information about a specific role\n- Include all permissions associated with the role\n- Include usage statistics (e.g., number of users assigned to the role)\n- Indicate whether the role can be modified\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All role details are returned correctly\n- User count is calculated accurately\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/GET_admin_roles_id.md`"
  },
  {
    "title": "Implement PUT /api/admin/roles/{id} API",
    "body": "## Description\nImplement the PUT /api/admin/roles/{id} API endpoint according to the specification in `specs/api/admin/PUT_admin_roles_id.md`.\n\n## Requirements\n- Update an existing role's name, description, and permissions\n- Validate role data for completeness and correctness\n- Prevent duplicate role names within the same tenant\n- Return the updated role with its complete details\n- Prevent modification of system roles\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All required fields are validated\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- System roles cannot be modified\n- Duplicate role names are prevented\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/PUT_admin_roles_id.md`"
  },
  {
    "title": "Implement DELETE /api/admin/roles/{id} API",
    "body": "## Description\nImplement the DELETE /api/admin/roles/{id} API endpoint according to the specification in `specs/api/admin/DELETE_admin_roles_id.md`.\n\n## Requirements\n- Delete a specific role by its ID\n- Prevent deletion of system roles\n- Prevent deletion of roles that are assigned to users\n- Return success confirmation upon successful deletion\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- System roles cannot be deleted\n- Roles assigned to users cannot be deleted\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/DELETE_admin_roles_id.md`"
  },
  {
    "title": "Implement GET /api/admin/users/{id}/roles API",
    "body": "## Description\nImplement the GET /api/admin/users/{id}/roles API endpoint according to the specification in `specs/api/admin/GET_admin_users_id_roles.md`.\n\n## Requirements\n- Return all roles assigned to a specific user\n- Include detailed information about each role\n- Filter roles by tenant context\n- Support pagination for users with many roles\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All roles assigned to the user are returned\n- Filtering and pagination work correctly\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/GET_admin_users_id_roles.md`"
  },
  {
    "title": "Implement POST /api/admin/users/{id}/roles API",
    "body": "## Description\nImplement the POST /api/admin/users/{id}/roles API endpoint according to the specification in `specs/api/admin/POST_admin_users_id_roles.md`.\n\n## Requirements\n- Assign multiple roles to a specific user in a single operation\n- Validate that all roles exist and belong to the tenant\n- Support both tenant-wide and site-specific role assignments\n- Return success confirmation upon successful assignment\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All roles are validated before assignment\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/POST_admin_users_id_roles.md`"
  },
  {
    "title": "Implement POST /api/admin/users/{id}/roles/{roleId} API",
    "body": "## Description\nImplement the POST /api/admin/users/{id}/roles/{roleId} API endpoint according to the specification in `specs/api/admin/POST_admin_users_id_roles_roleId.md`.\n\n## Requirements\n- Assign a specific role to a user\n- Validate that the role exists and belongs to the tenant\n- Support both tenant-wide and site-specific role assignments\n- Return success confirmation upon successful assignment\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- Role is validated before assignment\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/POST_admin_users_id_roles_roleId.md`"
  },
  {
    "title": "Implement DELETE /api/admin/users/{id}/roles/{roleId} API",
    "body": "## Description\nImplement the DELETE /api/admin/users/{id}/roles/{roleId} API endpoint according to the specification in `specs/api/admin/DELETE_admin_users_id_roles_roleId.md`.\n\n## Requirements\n- Remove a specific role from a user\n- Validate that the role exists and belongs to the tenant\n- Prevent removal of the user's last role\n- Return success confirmation upon successful removal\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- Role is validated before removal\n- User's last role cannot be removed\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/DELETE_admin_users_id_roles_roleId.md`"
  },
  {
    "title": "Implement GET /api/admin/roles/predefined API",
    "body": "## Description\nImplement the GET /api/admin/roles/predefined API endpoint according to the specification in `specs/api/admin/GET_admin_roles_predefined.md`.\n\n## Requirements\n- Return all predefined role templates\n- Group templates by type (tenant-wide and site-specific)\n- Include detailed permission information for each template\n- Implement proper authentication and authorization\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All predefined role templates are returned\n- Templates are grouped correctly\n- Proper error handling is implemented\n- Authentication and authorization are enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/GET_admin_roles_predefined.md`"
  },
  {
    "title": "Implement POST /api/admin/roles/predefined API",
    "body": "## Description\nImplement the POST /api/admin/roles/predefined API endpoint according to the specification in `specs/api/admin/POST_admin_roles_predefined.md`.\n\n## Requirements\n- Create predefined roles in the tenant\n- Support creating tenant-wide roles, site-specific roles, or both\n- Prevent duplicate role creation\n- Return the created roles with their assigned IDs\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- All role types are supported\n- Duplicate roles are handled correctly\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/POST_admin_roles_predefined.md`"
  },
  {
    "title": "Implement GET /api/admin/roles/predefined/{roleName} API",
    "body": "## Description\nImplement the GET /api/admin/roles/predefined/{roleName} API endpoint according to the specification in `specs/api/admin/GET_admin_roles_predefined_roleName.md`.\n\n## Requirements\n- Return a specific predefined role template by name\n- Include detailed permission information for the template\n- Implement proper authentication and authorization\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- Correct role template is returned\n- Proper error handling is implemented\n- Authentication and authorization are enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/GET_admin_roles_predefined_roleName.md`"
  },
  {
    "title": "Implement POST /api/admin/roles/predefined/{roleName} API",
    "body": "## Description\nImplement the POST /api/admin/roles/predefined/{roleName} API endpoint according to the specification in `specs/api/admin/POST_admin_roles_predefined_roleName.md`.\n\n## Requirements\n- Create a specific predefined role in the tenant\n- Support both tenant-wide and site-specific roles\n- Prevent duplicate role creation\n- Return the created role with its assigned ID\n- Implement proper tenant isolation\n\n## Acceptance Criteria\n- API endpoint follows the specification exactly\n- Both tenant-wide and site-specific roles are supported\n- Site ID is required for site-specific roles\n- Duplicate roles are handled correctly\n- Proper error handling is implemented\n- Tenant isolation is enforced\n- Unit tests cover all scenarios in the specification\n- Integration tests verify the API works end-to-end\n\n## Related Specifications\n- `specs/api/admin/POST_admin_roles_predefined_roleName.md`"
  }
]
