name: DirectoryMonster CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  docker-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      # Cache npm dependencies
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
      
      - name: Configure hostname resolution
        run: |
          # Add local domain entries to /etc/hosts for testing
          sudo bash -c 'echo "127.0.0.1 fishinggearreviews.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 hikinggearreviews.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 fishing-gear.mydirectory.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 hiking-gear.mydirectory.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 mydirectory.com" >> /etc/hosts'
      
      - name: Build and start Docker containers
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: directorymonster:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker
      
      # This step is necessary to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Start Docker containers
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          
          # Wait for containers to be healthy
          echo "Waiting for containers to be ready..."
          attempt=1
          max_attempts=10
          interval=5
          until docker-compose -f docker-compose.dev.yml exec -T app curl -s http://localhost:3000/api/healthcheck || [ $attempt -eq $max_attempts ]
          do
            echo "Health check attempt $attempt of $max_attempts failed, retrying in $interval seconds..."
            sleep $interval
            ((attempt++))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Container health check failed after $max_attempts attempts"
            docker-compose -f docker-compose.dev.yml logs
            exit 1
          fi
          
          echo "Containers are healthy and ready for testing"
          
          # Check the running containers
          docker ps
      
      - name: Seed data in Docker environment
        run: |
          echo "Seeding data in Docker environment..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run seed:docker
      
      # Run multiple test jobs in parallel
      - name: Run static analysis
        run: |
          echo "Running linting and type checking..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run lint
          docker-compose -f docker-compose.dev.yml exec -T app npm run typecheck
      
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          docker-compose -f docker-compose.dev.yml exec -T app npm test
      
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run test:integration
      
      - name: Run domain and rendering tests
        run: |
          echo "Running domain resolution tests..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run test:domain
          
          echo "Running page rendering tests..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run test:rendering
      
      - name: Run multitenancy tests
        run: |
          echo "Running multitenancy tests..."
          docker-compose -f docker-compose.dev.yml exec -T app npm run test:multitenancy
      
      - name: Check Redis data persistence
        run: |
          echo "Checking Redis data persistence..."
          docker-compose -f docker-compose.dev.yml exec -T redis redis-cli KEYS "*" | wc -l
      
      - name: Gather logs on failure
        if: ${{ failure() }}
        run: |
          echo "Gathering logs due to test failure..."
          docker-compose -f docker-compose.dev.yml logs > docker_logs.txt
          
          # Get Redis diagnostics
          echo "Redis diagnostics:"
          docker-compose -f docker-compose.dev.yml exec -T redis redis-cli info
          
          # Get Next.js app logs
          echo "Application logs:"
          docker-compose -f docker-compose.dev.yml logs app
      
      - name: Upload logs as artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            docker_logs.txt
            *_test_output.log
            test_output.log
            seed_output.log
          retention-days: 7
      
      - name: Stop Docker containers
        if: ${{ always() }}
        run: docker-compose -f docker-compose.dev.yml down
