name: DirectoryMonster Code Coverage

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  coverage-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      # Cache npm dependencies
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Ensure Docker Compose is available
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure hostname resolution
        run: |
          # Add local domain entries to /etc/hosts for testing
          sudo bash -c 'echo "127.0.0.1 fishinggearreviews.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 hikinggearreviews.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 fishing-gear.mydirectory.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 hiking-gear.mydirectory.com" >> /etc/hosts'
          sudo bash -c 'echo "127.0.0.1 mydirectory.com" >> /etc/hosts'
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Build and run Docker test containers
        run: |
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for containers to be ready
      
      - name: Seed test data
        run: |
          docker-compose -f docker-compose.test.yml exec -T app npm run seed:js
      
      - name: Run unit tests with coverage
        run: |
          docker-compose -f docker-compose.test.yml exec -T app npm test -- --config=jest.coverage.config.js
      
      - name: Run integration tests with coverage
        run: |
          docker-compose -f docker-compose.test.yml exec -T app npm run test:integration -- --config=jest.coverage.config.js
      
      - name: Extract coverage reports
        run: |
          docker-compose -f docker-compose.test.yml cp app:/app/coverage ./coverage
      
      # Upload coverage reports
      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 7
      
      # Validate coverage thresholds
      - name: Check coverage thresholds
        run: |
          if [ -f "./coverage/coverage-summary.json" ]; then
            TOTAL_COVERAGE=$(cat ./coverage/coverage-summary.json | grep -o '"pct":[0-9.]*' | head -1 | cut -d':' -f2)
            echo "Total coverage: $TOTAL_COVERAGE%"
            if (( $(echo "$TOTAL_COVERAGE < 100" | bc -l) )); then
              echo "Coverage threshold not met! (Required: 100%)"
              echo "Files with less than 100% coverage:"
              cat ./coverage/coverage-summary.json | grep -A 10 "src/.*\.tsx\?" | grep -B 1 '"pct":[0-9.]*' | grep -B 1 '"pct":[0-9]\|"pct":[0-9][0-9]\.0*$' | grep -v "pct\|--" | cut -d'"' -f2
              exit 1
            else
              echo "Coverage threshold met! (100%)"
            fi
          else
            echo "Coverage summary file not found!"
            exit 1
          fi
      
      # Stop containers
      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.test.yml down
      
      # Upload logs in case of failure
      - name: Upload logs as artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            *_test_output.log
            test_output.log
          retention-days: 7