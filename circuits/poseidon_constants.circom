/*
 * Poseidon Hash Function Constants
 *
 * Generated on: 2025-04-04T23:59:45.042Z
 * These constants are cryptographically secure and should not be changed.
 *
 * These constants are derived from the SHA-256 hash of the first 21 prime numbers,
 * ensuring they are cryptographically secure and not easily predictable.
 */

// Individual constants for the Poseidon hash function
function POSEIDON_C0() { return 14127207413682887128257166268795091479944297324443404399703257002282948257010; }
function POSEIDON_C1() { return 9977197213122278055810185598317264024975779893327331495731723044154542197811; }
function POSEIDON_C2() { return 4347748578032949698773816294953790574178305870449413929721801138828937096099; }
function POSEIDON_C3() { return 7583697072692744164617585979171345516455849113995247273993030863701141926893; }
function POSEIDON_C4() { return 4964558447715737033046194909241882293197601097328224530535761143125127302860; }
function POSEIDON_C5() { return 13064561926839547829891650776327367109760820627971436917318843938711793510908; }
function POSEIDON_C6() { return 13631456233209489536038972847215217843169049250608957726900227662226050546287; }
function POSEIDON_C7() { return 991635334239543808128978190715764737608279038908378137140099731044308561309; }
function POSEIDON_C8() { return 8842278478119191177003062026024759004147652391424079596472047310443477649129; }
function POSEIDON_C9() { return 6945009003833654971693489446684447664308404243480379615472561177596000294311; }
function POSEIDON_C10() { return 18927710545243762405883549077182453541488662369695243272321724230989923391475; }
function POSEIDON_C11() { return 5464555423943106589470391372512312587867635581334824059685940168374072708027; }
function POSEIDON_C12() { return 16562473848727440042385876941914982310487634111972736456788621305774564781973; }
function POSEIDON_C13() { return 11842320020120275095706498724847006842305264546348255912687402075835659228128; }
function POSEIDON_C14() { return 19371377613485310558179734174919175315520237066080320069746087938009973273936; }
function POSEIDON_C15() { return 3706121783536321325060970889173836497437302085816119773283470804376625458941; }
function POSEIDON_C16() { return 14971881569649955856978139756572229302628932921788874775268396832849986680302; }
function POSEIDON_C17() { return 8504893872258102407789836924215167969386041975431210072139416341767777444480; }
function POSEIDON_C18() { return 21838227185867348772012263204773693328489582931381152372788231810665586275716; }
function POSEIDON_C19() { return 7220823962762098342617838076346866485811737785423191760682351482495323225785; }
function POSEIDON_C20() { return 16903767609846446119265356598332091708877571940829587781789509467311079910379; }

// Get a constant by index
function POSEIDON_CONSTANT(i) {
    if (i == 0) return POSEIDON_C0();
    if (i == 1) return POSEIDON_C1();
    if (i == 2) return POSEIDON_C2();
    if (i == 3) return POSEIDON_C3();
    if (i == 4) return POSEIDON_C4();
    if (i == 5) return POSEIDON_C5();
    if (i == 6) return POSEIDON_C6();
    if (i == 7) return POSEIDON_C7();
    if (i == 8) return POSEIDON_C8();
    if (i == 9) return POSEIDON_C9();
    if (i == 10) return POSEIDON_C10();
    if (i == 11) return POSEIDON_C11();
    if (i == 12) return POSEIDON_C12();
    if (i == 13) return POSEIDON_C13();
    if (i == 14) return POSEIDON_C14();
    if (i == 15) return POSEIDON_C15();
    if (i == 16) return POSEIDON_C16();
    if (i == 17) return POSEIDON_C17();
    if (i == 18) return POSEIDON_C18();
    if (i == 19) return POSEIDON_C19();
    if (i == 20) return POSEIDON_C20();
    return 0;
}

// MDS matrix for the Poseidon hash function
// This is a secure MDS matrix with a non-zero determinant
function POSEIDON_MDS(i, j) {
    // First row
    if (i == 0 && j == 0) return 3;
    if (i == 0 && j == 1) return 1;
    if (i == 0 && j == 2) return 1;

    // Second row
    if (i == 1 && j == 0) return 1;
    if (i == 1 && j == 1) return 3;
    if (i == 1 && j == 2) return 1;

    // Third row
    if (i == 2 && j == 0) return 1;
    if (i == 2 && j == 1) return 1;
    if (i == 2 && j == 2) return 3;

    return 0;
}
